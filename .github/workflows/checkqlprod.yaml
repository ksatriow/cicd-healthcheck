name: Deploy With Semantic Tag Release

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: kukuhsatrio/cicdhealthcheck
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  DOCKERFILE_PATH: Dockerfile

permissions:
  contents: write      

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - name: Set environment variables
        env:
            ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
            echo $ENV_FILE | base64 --decode >> /home/runner/work/cicd-healthcheck/cicd-healthcheck/.env
            ls -l
          
      - name: Install dependencies
        run: npm install

      - name: Run Lint
        run: npm run lint        

      - name: Run Testing
        run: npm run test -- --exit        

      - name: git config
        run: |
          git config user.name "ksatriow"
          git config user.email "andkukuh@gmail.com"
      - run: npm run releaseci
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}      

      - name: package.json info
        id: info
        uses: jaywcjlove/github-action-package@main
        with:
            rename: '@jaywcjlove/github-action-package-test'
        
      - run: echo "version - ${{ steps.info.outputs.version }}"
        
  ggshield-secret-scan-main:
    name: ggshield secret scan, using the action from ggshield repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Scan Secret
        uses: GitGuardian/ggshield/actions/secret@main
        with:
          args: -v --all-policies
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
  
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
            scan-type: 'fs'
            ignore-unfixed: true
            format: 'sarif'
            output: 'trivy-results.sarif'
            severity: 'CRITICAL'
  
      - name: Run Checkov
        run: |
             docker run -t -v ${{ github.workspace }}:/tf --workdir /tf bridgecrew/checkov --directory . --skip-check CKV2_GHA_1

      - name: Log into registry
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
     
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
            com.docker.image.source.entrypoint=${{ env.DOCKERFILE_PATH }}

      - name: Build and push Docker image on push
        id: build-and-push
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          load: false
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64"
          sbom: false
          provenance: false

      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@788bd7991dd23939af62db37c4b77ec009021e17
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: sarif.output.json
          platform: "linux/amd64"
          summary: true

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
          body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
          to: andkukuh@gmail.com
          from: satrio

